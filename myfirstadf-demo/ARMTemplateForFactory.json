{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "myfirstadf-demo"
		},
		"sourcedatalakestorage_movies_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'sourcedatalakestorage_movies'"
		},
		"sourcedatalakestorage_movies_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://firststgacnt.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Secondpipeline_upsert_delta')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Secondpipeline_upsert_delta",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_transformations_update",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dftransformationsupdate": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-03T06:08:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_transformations_update')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_datalake_deltalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "movies_datalake_deltalake",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_datalake_deltalake_movies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dfdeltalake": {},
									"deltalake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-03T06:08:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_datalake_deltalake_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_movies_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sourcedatalakestorage_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Movies.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movies",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "genresgenregenre",
						"type": "String"
					},
					{
						"name": "YEAR",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sourcedatalakestorage_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourcedatalakestorage_movies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sourcedatalakestorage_movies_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('sourcedatalakestorage_movies_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_datalake_deltalake_movies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_movies_input",
								"type": "DatasetReference"
							},
							"name": "dfdeltalake"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sourcedatalakestorage_movies",
								"type": "LinkedServiceReference"
							},
							"name": "deltalake"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          movies as string,",
						"          Title as string,",
						"          genresgenregenre as string,",
						"          YEAR as string,",
						"          Rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dfdeltalake",
						"dfdeltalake sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'output',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> deltalake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_movies_input')]",
				"[concat(variables('factoryId'), '/linkedServices/sourcedatalakestorage_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_transformations_update')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_movies_input",
								"type": "DatasetReference"
							},
							"name": "dftransformationsupdate"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "sourcedatalakestorage_movies",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movies as string,",
						"          Title as string,",
						"          genresgenregenre as string,",
						"          YEAR as integer,",
						"          Rating as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dftransformationsupdate",
						"dftransformationsupdate filter(YEAR == 1950 || YEAR == 1988 || YEAR == 1960) ~> filter",
						"filter derive(Rating = iif(YEAR==1950,1,toInteger(Rating))) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(YEAR==1950)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'output',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['movies','YEAR'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_movies_input')]",
				"[concat(variables('factoryId'), '/linkedServices/sourcedatalakestorage_movies')]"
			]
		}
	]
}